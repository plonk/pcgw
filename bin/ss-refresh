#!/usr/bin/env ruby
# スクリーンショット更新スクリプト

require_relative '../init'
require_relative '../models/init'
require_relative '../lib/logging'

Logging.logger = Logger.new('log/ss.log', 'daily')

require 'shellwords'
require 'timeout'

Signal.trap(:TERM) { puts 'TERM trapped' }

class ScreenShotRefresh
  include Logging

  # このスクリプトは(アプリケーションディレクトリ)/bin/ss-refresh。
  APP_DIR = File.dirname(File.dirname(File.absolute_path(__FILE__)))

  def initialize
  end

  def command(channel, output)
    case channel.channel_info.stream_type
    when 'WMV' then "ffmpeg -i mmsh://#{channel.servent.hostname}:#{channel.servent.port}/stream/#{channel.gnu_id} -y -vf \"select='eq(pict_type,PICT_TYPE_I)'\" -vsync vfr -vframes 1 #{Shellwords.escape(output)}"
    else
      "ffmpeg -i http://#{channel.servent.hostname}:#{channel.servent.port}/stream/#{channel.gnu_id} -y -vf \"select='eq(pict_type,PICT_TYPE_I)'\" -vsync vfr -vframes 1 #{Shellwords.escape(output)}"
    end
  end

  def capture(channel, output)
    cmd = command(channel, output)
    log.debug "executing #{cmd.inspect}"

    pid = spawn(cmd)
    Timeout.timeout(30) do
      Process.waitpid(pid)
      log.info "exit status #{$?}"
      if $? != 0
        return false
      end
    end
    return File.exist?(output)
  rescue Timeout::Error
    # ffmpeg がダウンロードを開始すると 1 回の SIGTERM では死なないので
    # 2 回送る。
    2.times do
      Process.kill('-SIGTERM', Process.getpgid(pid))
      sleep 0.1
    end
    # 子供の死を看取る
    Process.waitpid(pid)
    log.error('capturing timed out')
    return false
  end

  def screen_shot_dir
    File.join(APP_DIR, '/public/ss')
  end

  def run
    # アプリケーションのディレクトリに移動する。
    Dir.chdir(APP_DIR)

    FileUtils.mkdir_p(screen_shot_dir)

    n = 0
    Channel.all.each do |ch|
      # ファイル名を決定する。
      tmp_path = File.join('/tmp', "#{ch.gnu_id}.jpg")
      store_path = File.join(screen_shot_dir, "#{ch.gnu_id}.jpg")

      if capture(ch, tmp_path)
        if ch.hide_screenshots
          log.info("ss-refresh run: Skipping #{ch.gnu_id}(#{ch.channel_info.channel})")
          system("convert -resize 640x10000 -strip -blur 30x30 #{tmp_path} #{store_path}")
        else
          log.info("ss-refresh run: #{ch.gnu_id}(#{ch.channel_info.channel})")
          system("convert -resize 640x10000 -strip #{tmp_path} #{store_path}")
        end
        n += 1
      end
    end
    log.info("took #{n} shots of #{Channel.all.count} channels")

  end

end

app = ScreenShotRefresh.new
app.run
